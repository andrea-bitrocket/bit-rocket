{"version":3,"sources":["components/layout/Navbar.tsx","components/layout/Header.tsx","components/views/ViewHome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BitRocketNavbar","Navbar","className","Row","Col","xs","lg","width","height","viewBox","fill","xmlns","d","Header","Container","href","target","rel","icon","faLinkedin","faInstagram","ViewHome","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAMaA,EAA4B,WACvC,OACE,kBAACC,EAAA,EAAD,CAAQC,UAAU,iBAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,IACd,yBAAKJ,UAAU,kBACb,yBACEK,MAAM,MACNC,OAAO,KACPC,QAAQ,aACRC,KAAK,OACLC,MAAM,8BAEN,0BACEC,EAAE,8yBACFF,KAAK,UAEP,0BACEE,EAAE,icACFF,KAAK,UAEP,0BACEE,EAAE,+eACFF,KAAK,UAEP,0BACEE,EAAE,wfACFF,KAAK,UAEP,0BACEE,EAAE,wxBACFF,KAAK,UAEP,0BACEE,EAAE,6rBACFF,KAAK,UAEP,0BACEE,EAAE,+IACFF,KAAK,UAEP,0BACEE,EAAE,gzBACFF,KAAK,UAEP,0BACEE,EAAE,iiBACFF,KAAK,UAEP,0BACEE,EAAE,sYACFF,KAAK,UAEP,0BACEE,EAAE,u1BACFF,KAAK,UAEP,0BACEE,EAAE,0zBACFF,KAAK,UAEP,0BACEE,EAAE,2GACFF,KAAK,UAEP,0BACEE,EAAE,+NACFF,KAAK,UAEP,0BACEE,EAAE,uIACFF,KAAK,UAEP,0BACEE,EAAE,iIACFF,KAAK,kB,wBC5EZG,EAAmB,WAC9B,OACE,kBAAC,WAAD,KACE,4BAAQX,UAAU,kBAChB,kBAACY,EAAA,EAAD,KACE,kBAACX,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIH,UAAU,iCACrB,wBAAIA,UAAU,eACZ,2CACA,2CAGJ,kBAACE,EAAA,EAAD,CAAKC,GAAI,GAAIH,UAAU,iCACrB,wBAAIA,UAAU,mBACZ,2BACE,0BAAMA,UAAU,WAAhB,iBADF,kBACgE,IAC9D,0BAAMA,UAAU,WAAhB,0BAEF,2BACG,IADH,wBAEuB,0BAAMA,UAAU,WAAhB,YAEb,IAJV,OAKM,0BAAMA,UAAU,WAAhB,UALN,iBAOA,yFAEK,IACL,qFAGJ,kBAACE,EAAA,EAAD,CAAKC,GAAI,GAAIH,UAAU,iCACrB,uBACEa,KAAK,iDACLC,OAAO,SACPC,IAAI,sBACJf,UAAU,qCAEV,kBAAC,IAAD,CAAiBgB,KAAMC,OAEzB,uBACEJ,KAAK,2CACLC,OAAO,SACPC,IAAI,sBACJf,UAAU,qCAEV,kBAAC,IAAD,CAAiBgB,KAAME,aChD1BC,EAAqB,WAChC,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,QCMSC,EATO,WACpB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb8503c5.chunk.js","sourcesContent":["/** @format */\n\nimport React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Navbar } from \"react-bootstrap\";\n\nexport const BitRocketNavbar: React.FC = (): JSX.Element => {\n  return (\n    <Navbar className=\"custom-navbar\">\n      <Row>\n        <Col xs={12}>\n          <Row>\n            <Col xs={5} lg={12}>\n              <div className=\"bR-margin-left\">\n                <svg\n                  width=\"198\"\n                  height=\"40\"\n                  viewBox=\"0 0 198 40\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M57.4155 20.2478C59.2874 20.2478 60.7992 20.8941 61.9512 22.1508C63.1031 23.4075 63.679 25.0592 63.679 27.1418C63.679 29.1526 63.0671 30.8043 61.8792 32.0969C60.6913 33.3896 59.1434 34 57.2355 34C56.3716 34 55.5436 33.8204 54.7877 33.4255C54.0317 33.0305 53.4558 32.5278 53.0598 31.8815V33.6409H50V14H53.0598V22.3303C53.4558 21.684 54.0677 21.1813 54.8597 20.7864C55.6156 20.4273 56.4795 20.2478 57.4155 20.2478ZM56.7675 31.2352C57.8835 31.2352 58.8194 30.8402 59.5393 30.0862C60.2593 29.2962 60.6193 28.3267 60.6193 27.1059C60.6193 25.8851 60.2593 24.8797 59.5393 24.1257C58.8194 23.3357 57.9194 22.9767 56.7675 22.9767C55.6156 22.9767 54.6797 23.3716 53.9597 24.1257C53.2398 24.8797 52.8798 25.8851 52.8798 27.1418C52.8798 28.3986 53.2398 29.368 53.9597 30.158C54.6797 30.8761 55.6156 31.2352 56.7675 31.2352Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M69.7632 18.0216C69.3313 18.4524 68.7913 18.6679 68.1433 18.6679C67.4954 18.6679 66.9554 18.4524 66.5235 18.0216C66.0915 17.5907 65.8755 17.0521 65.8755 16.4058C65.8755 15.7594 66.0915 15.2208 66.5235 14.79C66.9554 14.3591 67.4954 14.1436 68.1433 14.1436C68.7913 14.1436 69.3313 14.3591 69.7632 14.79C70.1952 15.2208 70.4112 15.7594 70.4112 16.4058C70.4112 17.0521 70.1952 17.5907 69.7632 18.0216ZM66.5954 33.6409V20.5709H69.6552V33.6409H66.5954Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M79.5182 31.0556C80.1302 31.0556 80.6341 31.0197 81.0661 30.9479V33.6409C80.4181 33.7486 79.6622 33.8204 78.7983 33.8204C78.2943 33.8204 77.8623 33.7845 77.4664 33.7127C77.1064 33.6409 76.6384 33.4613 76.1344 33.21C75.6305 32.9227 75.2345 32.456 74.9465 31.8096C74.6585 31.1274 74.5146 30.3016 74.5146 29.2603V23.1921H72.2827V20.6427H74.5146V16.693H77.5743V20.6427H80.5981V23.1921H77.5743V28.578C77.5743 29.6193 77.7183 30.3016 78.0063 30.6247C78.3663 30.8761 78.8343 31.0556 79.5182 31.0556Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M98.3809 20.7864C98.3809 22.3303 97.9849 23.6589 97.2289 24.8079C96.473 25.9569 95.4291 26.7469 94.0972 27.1777L98.0929 33.6409H95.1771L91.3973 27.5727H87.2936V33.6409H84.7378V14H91.7933C93.7372 14 95.3211 14.6463 96.545 15.903C97.7689 17.1957 98.3809 18.8115 98.3809 20.7864ZM87.2936 16.298V25.2388H91.6493C92.8732 25.2388 93.8812 24.8079 94.6731 23.982C95.4651 23.1562 95.861 22.079 95.861 20.7864C95.861 19.4937 95.4651 18.4165 94.6731 17.5548C93.8812 16.7289 92.8732 16.298 91.6493 16.298H87.2936Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M107.272 33.9641C105.22 33.9641 103.564 33.3178 102.34 32.0251C101.116 30.7325 100.504 29.1167 100.504 27.1777C100.504 25.2388 101.116 23.623 102.34 22.3303C103.564 21.0377 105.184 20.3914 107.272 20.3914C109.324 20.3914 110.944 21.0377 112.168 22.3303C113.391 23.623 114.003 25.2388 114.003 27.1777C114.003 29.1167 113.391 30.7325 112.168 32.0251C110.98 33.3178 109.324 33.9641 107.272 33.9641ZM104.14 30.4811C104.932 31.3429 105.976 31.7738 107.308 31.7738C108.64 31.7738 109.684 31.3429 110.44 30.4811C111.196 29.6194 111.592 28.5063 111.592 27.1777C111.592 25.8492 111.196 24.7361 110.44 23.8743C109.684 23.0126 108.64 22.5817 107.308 22.5817C105.976 22.5817 104.932 23.0126 104.14 23.8743C103.348 24.7361 102.988 25.8492 102.988 27.2136C102.952 28.5063 103.348 29.6194 104.14 30.4811Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M123.039 33.9641C121.06 33.9641 119.512 33.3537 118.36 32.0969C117.208 30.8402 116.632 29.2244 116.632 27.1777C116.632 25.1311 117.208 23.5153 118.36 22.2585C119.512 21.0018 121.096 20.3914 123.039 20.3914C124.767 20.3914 126.171 20.8223 127.251 21.684C128.331 22.5458 128.943 23.7307 129.087 25.167H126.639C126.315 23.4435 125.091 22.5458 123.039 22.5458C121.779 22.5458 120.808 22.9408 120.088 23.7666C119.368 24.5925 119.008 25.7056 119.008 27.1418C119.008 28.5781 119.368 29.6912 120.088 30.517C120.808 31.3429 121.779 31.7379 123.039 31.7379C125.091 31.7379 126.279 30.912 126.639 29.2244H129.087C128.943 30.6607 128.331 31.8097 127.251 32.6714C126.207 33.5332 124.803 33.9641 123.039 33.9641Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M143.306 20.7145L137.006 26.9623L143.306 33.6409H140.066L134.415 27.5727V33.6409H131.967V14H134.415V26.5673L140.138 20.6786H143.306V20.7145Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M156.589 26.4237C156.589 26.7828 156.553 27.2496 156.517 27.8959H146.474C146.51 29.1167 146.87 30.0862 147.589 30.8043C148.309 31.5225 149.317 31.8456 150.541 31.8456C152.269 31.8456 153.421 31.1993 153.961 29.9426H156.409C156.193 31.1275 155.545 32.097 154.429 32.851C153.349 33.605 152.053 33.9641 150.505 33.9641C148.525 33.9641 146.942 33.3537 145.754 32.1329C144.566 30.912 143.99 29.2603 143.99 27.1419C143.99 25.0952 144.566 23.4435 145.718 22.2226C146.87 21.0018 148.417 20.3555 150.361 20.3555C152.197 20.3555 153.673 20.93 154.825 22.0431C156.049 23.1921 156.589 24.6284 156.589 26.4237ZM146.474 25.9928H154.177C154.177 24.8438 153.853 23.9462 153.169 23.2998C152.521 22.6535 151.585 22.3304 150.397 22.3304C149.245 22.3304 148.309 22.6535 147.589 23.3358C146.906 24.018 146.546 24.9156 146.474 25.9928Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M165.337 31.5942C166.021 31.5942 166.561 31.5583 166.956 31.4506V33.605C166.381 33.7486 165.661 33.7845 164.797 33.7845C164.401 33.7845 164.077 33.7486 163.789 33.7127C163.501 33.6768 163.141 33.5691 162.781 33.3896C162.385 33.21 162.061 32.9946 161.809 32.6714C161.557 32.3483 161.305 31.9174 161.125 31.3429C160.945 30.7684 160.837 30.0862 160.837 29.2962V22.7253H158.497V20.6786H160.837V16.6212H163.285V20.7145H166.561V22.7612H163.285V28.8294C163.285 29.9784 163.465 30.7325 163.789 31.0556C164.113 31.4147 164.617 31.5942 165.337 31.5942Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M170.088 33.7127C169.8 33.7127 169.548 33.605 169.368 33.4255C169.188 33.21 169.08 32.9946 169.08 32.7074C169.08 32.4201 169.188 32.1688 169.368 31.9892C169.548 31.8097 169.8 31.702 170.088 31.702C170.376 31.702 170.628 31.8097 170.808 31.9892C170.988 32.1688 171.096 32.4201 171.096 32.7074C171.096 32.9946 170.988 33.246 170.808 33.4255C170.628 33.6409 170.376 33.7127 170.088 33.7127Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M178.979 23.8025H180.203V33.605H178.979V32.456C178.763 32.851 178.475 33.1741 178.043 33.3896C177.611 33.6409 177.179 33.7486 176.675 33.7486C175.667 33.7486 174.875 33.4255 174.335 32.7791C173.759 32.1328 173.471 31.3429 173.471 30.3375C173.471 29.368 173.759 28.5422 174.335 27.8958C174.911 27.2495 175.703 26.9264 176.675 26.9264C177.179 26.9264 177.647 27.0341 178.043 27.2854C178.439 27.5368 178.763 27.824 178.943 28.2549V27.5727V23.8025H178.979ZM176.855 32.7073C177.539 32.7073 178.079 32.4919 178.475 32.0251C178.871 31.5942 179.051 31.0197 179.051 30.4093C179.051 29.763 178.871 29.2244 178.475 28.7576C178.079 28.3267 177.539 28.0754 176.855 28.0754C176.207 28.0754 175.667 28.2908 175.271 28.7217C174.875 29.1526 174.695 29.7271 174.695 30.3734C174.695 31.0556 174.875 31.5942 175.271 32.0251C175.667 32.4919 176.207 32.7073 176.855 32.7073Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M189.131 30.0143C189.131 30.1939 189.131 30.4452 189.095 30.7325H184.091C184.091 31.3429 184.271 31.8456 184.667 32.1687C185.027 32.5278 185.531 32.7073 186.143 32.7073C187.007 32.7073 187.583 32.3842 187.871 31.7379H189.095C188.987 32.3483 188.663 32.8151 188.123 33.21C187.583 33.5691 186.935 33.7845 186.179 33.7845C185.171 33.7845 184.379 33.4614 183.803 32.851C183.227 32.2406 182.939 31.4147 182.939 30.3734C182.939 29.3321 183.227 28.5063 183.803 27.8959C184.379 27.2854 185.171 26.9623 186.107 26.9623C187.043 26.9623 187.763 27.2495 188.339 27.7881C188.843 28.3985 189.131 29.1167 189.131 30.0143ZM184.055 29.8348H187.907C187.907 29.2603 187.727 28.8294 187.403 28.5063C187.079 28.1831 186.611 28.0036 186.035 28.0036C185.459 28.0036 184.991 28.1831 184.631 28.5063C184.271 28.8294 184.091 29.2603 184.055 29.8348Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M193.306 33.6409L190.462 27.1777H191.758L193.81 32.0251L195.862 27.1777H197.158L194.314 33.6409H193.306Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M18.1763 8.76112L9.12012 20.2376L20.8274 19.1769L19.767 30.8867L31.241 21.8286C36.7765 17.4586 40.0002 10.7976 40.0002 3.73355V2.8638C40.0002 1.29402 38.7065 0 37.1158 0H36.2463C29.2049 0 22.5453 3.22443 18.1763 8.76112Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M0.360544 26.8561L16.1399 6.87314C12.0466 6.97921 7.99574 8.59142 4.85682 11.731C0.742304 15.8252 -0.763526 21.574 0.360544 26.8561Z\"\n                    fill=\"white\"\n                  />\n                  <path\n                    d=\"M33.1282 23.865L13.1494 39.6478C18.4516 40.7509 24.178 39.2659 28.2925 35.1505C31.4103 32.0322 33.0221 27.9592 33.1282 23.865Z\"\n                    fill=\"white\"\n                  />\n                </svg>\n              </div>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Navbar>\n  );\n};\n","/** @format */\n\nimport React, { Fragment } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLinkedin, faInstagram } from \"@fortawesome/free-brands-svg-icons\";\n\nexport const Header: React.FC = (): JSX.Element => {\n  return (\n    <Fragment>\n      <header className=\"bR-center-text\">\n        <Container>\n          <Row>\n            <Col xs={12} className=\"mx-auto bR-padding-top-bottom\">\n              <h1 className=\"header-logo\">\n                <p>Quality code</p>\n                <p>Made smart</p>\n              </h1>\n            </Col>\n            <Col xs={12} className=\"mx-auto bR-padding-top-bottom\">\n              <h2 className=\"bR-presentation\">\n                <p>\n                  <span className=\"bR-bold\">bitRocket.dev</span> is not just an{\" \"}\n                  <span className=\"bR-bold\">IT Consulting company</span>\n                </p>\n                <p>\n                  {\" \"}\n                  with super powers on <span className=\"bR-bold\">\n                    React JS\n                  </span>{\" \"}\n                  and <span className=\"bR-bold\">Native</span> development.\n                </p>\n                <p>\n                  We are a team of proud nerds that believe in smart working\n                </p>{\" \"}\n                <p>and great team building events all around the world.</p>\n              </h2>\n            </Col>\n            <Col xs={12} className=\"mx-auto bR-padding-top-bottom\">\n              <a\n                href=\"https://www.linkedin.com/company/bitrocketdev/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"social-icon bR-padding-left-right\"\n              >\n                <FontAwesomeIcon icon={faLinkedin} />\n              </a>\n              <a\n                href=\"https://www.instagram.com/bitrocket.dev/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"social-icon bR-padding-left-right\"\n              >\n                <FontAwesomeIcon icon={faInstagram} />\n              </a>\n            </Col>\n          </Row>\n        </Container>\n      </header>\n    </Fragment>\n  );\n};\n","/** @format */\n\nimport React, { Fragment } from \"react\";\nimport { Header } from \"../layout/Header\";\n\nexport const ViewHome: React.FC = (): JSX.Element => {\n  return (\n    <Fragment>\n      <Header />\n      {/* <WhoAreYou /> */}\n      {/* <Footer /> */}\n    </Fragment>\n  );\n};\n","import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport { BitRocketNavbar } from \"./components/layout/Navbar\";\nimport { ViewHome } from \"./components/views/ViewHome\";\n\nconst App: React.FC = (): JSX.Element => {\n  return (\n    <Fragment>\n      <BitRocketNavbar />\n      <ViewHome />\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}